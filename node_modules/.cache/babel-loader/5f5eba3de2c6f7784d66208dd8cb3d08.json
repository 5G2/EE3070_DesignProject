{"ast":null,"code":"import axios from 'axios';\nimport { LOGIN_SUCCESS, LOGIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, LOGOUT } from \"./types\";\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem\n    });\n    try {\n      const res = await axios.post(`http://127.0.0.1:8000/auth/jwt/verify/`, body, config);\n      if (res.data.code !== 'token_not_valid') {\n        dispatch({\n          type: AUTHENTICATED_SUCCESS\n        });\n      } else {\n        dispatch({\n          type: AUTHENTICATED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n    try {\n      console.log(localStorage.getItem('access'));\n\n      // const res=await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`,config)\n      const res = await axios.get(`http://127.0.0.1:8000/auth/users/me/`, config);\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      console.log(\"load_user failed\");\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n  console.log(\"login\");\n  try {\n    //const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    const res = await axios.post('http://127.0.0.1:8000/auth/jwt/create/', body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(load_user());\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["axios","LOGIN_SUCCESS","LOGIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","LOGOUT","checkAuthenticated","dispatch","localStorage","getItem","config","headers","body","JSON","stringify","token","res","post","data","code","type","err","load_user","console","log","get","payload","login","email","password","logout"],"sources":["/Users/ivanng/Desktop/Bookit/Code/Bookit_frontend/Bookit_frontend/src/actions/auth.js"],"sourcesContent":["import axios from 'axios'\nimport {\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    LOGOUT\n  } from \"./types\";\n\n  export const checkAuthenticated = () => async dispatch =>{\n    if(localStorage.getItem('access')){\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }\n        const body = JSON.stringify({token:localStorage.getItem});\n        try{\n            const res = await axios.post(`http://127.0.0.1:8000/auth/jwt/verify/`,body,config)\n        if(res.data.code !=='token_not_valid'){\n            dispatch({\n                type: AUTHENTICATED_SUCCESS\n            })\n        }else{\n            dispatch({\n                type: AUTHENTICATED_FAIL\n            })\n        }\n        } catch(err){\n            dispatch({\n                type: AUTHENTICATED_FAIL\n            })\n        }\n    }else{\n        dispatch({\n            type: AUTHENTICATED_FAIL\n        })\n    }\n  };\n  export const load_user = () => async dispatch => {\n    if (localStorage.getItem('access')) {\n        const config ={\n            headers:{\n                'Content-Type': 'application/json',\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\n                'Accept': 'application/json'\n            }\n        };\n        try{\n            console.log(localStorage.getItem('access'));\n\n           // const res=await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`,config)\n            const res=await axios.get(`http://127.0.0.1:8000/auth/users/me/`,config)\n    \n            dispatch({\n                type: USER_LOADED_SUCCESS,\n                payload: res.data\n            });\n        } catch (err) {\n            console.log(\"load_user failed\");\n\n            dispatch({\n                type: USER_LOADED_FAIL\n            });\n        }\n    } else {\n        dispatch({\n            type: USER_LOADED_FAIL\n        });\n    }\n};\nexport const login = (email, password) => async dispatch => {\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    \n    const body = JSON.stringify({ email, password });\n    console.log(\"login\")\n    try {\n        //const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n        const res = await axios.post('http://127.0.0.1:8000/auth/jwt/create/', body, config);\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        });\n\n        dispatch(load_user());\n    } catch (err) {\n        dispatch({\n            type: LOGIN_FAIL\n        })\n    }\n};\n\n\nexport const logout = () => dispatch =>{\n    dispatch({\n        type: LOGOUT\n    })\n}"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACIC,aAAa,EACbC,UAAU,EACVC,mBAAmB,EACnBC,gBAAgB,EAChBC,qBAAqB,EACrBC,kBAAkB,EAClBC,MAAM,QACD,SAAS;AAEhB,OAAO,MAAMC,kBAAkB,GAAG,MAAM,MAAMC,QAAQ,IAAG;EACvD,IAAGC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAC;IAC9B,MAAMC,MAAM,GAAE;MACVC,OAAO,EAAC;QACJ,cAAc,EAAE,kBAAkB;QAClC,QAAQ,EAAE;MACd;IACJ,CAAC;IACD,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;MAACC,KAAK,EAACP,YAAY,CAACC;IAAO,CAAC,CAAC;IACzD,IAAG;MACC,MAAMO,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAE,wCAAuC,EAACL,IAAI,EAACF,MAAM,CAAC;MACtF,IAAGM,GAAG,CAACE,IAAI,CAACC,IAAI,KAAI,iBAAiB,EAAC;QAClCZ,QAAQ,CAAC;UACLa,IAAI,EAAEjB;QACV,CAAC,CAAC;MACN,CAAC,MAAI;QACDI,QAAQ,CAAC;UACLa,IAAI,EAAEhB;QACV,CAAC,CAAC;MACN;IACA,CAAC,CAAC,OAAMiB,GAAG,EAAC;MACRd,QAAQ,CAAC;QACLa,IAAI,EAAEhB;MACV,CAAC,CAAC;IACN;EACJ,CAAC,MAAI;IACDG,QAAQ,CAAC;MACLa,IAAI,EAAEhB;IACV,CAAC,CAAC;EACN;AACF,CAAC;AACD,OAAO,MAAMkB,SAAS,GAAG,MAAM,MAAMf,QAAQ,IAAI;EAC/C,IAAIC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAE;IAChC,MAAMC,MAAM,GAAE;MACVC,OAAO,EAAC;QACJ,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,OAAMH,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAE,EAAC;QACxD,QAAQ,EAAE;MACd;IACJ,CAAC;IACD,IAAG;MACCc,OAAO,CAACC,GAAG,CAAChB,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;;MAE5C;MACC,MAAMO,GAAG,GAAC,MAAMlB,KAAK,CAAC2B,GAAG,CAAE,sCAAqC,EAACf,MAAM,CAAC;MAExEH,QAAQ,CAAC;QACLa,IAAI,EAAEnB,mBAAmB;QACzByB,OAAO,EAAEV,GAAG,CAACE;MACjB,CAAC,CAAC;IACN,CAAC,CAAC,OAAOG,GAAG,EAAE;MACVE,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAE/BjB,QAAQ,CAAC;QACLa,IAAI,EAAElB;MACV,CAAC,CAAC;IACN;EACJ,CAAC,MAAM;IACHK,QAAQ,CAAC;MACLa,IAAI,EAAElB;IACV,CAAC,CAAC;EACN;AACJ,CAAC;AACD,OAAO,MAAMyB,KAAK,GAAG,CAACC,KAAK,EAAEC,QAAQ,KAAK,MAAMtB,QAAQ,IAAI;EACxD,MAAMG,MAAM,GAAG;IACXC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB;EACJ,CAAC;EAGD,MAAMC,IAAI,GAAGC,IAAI,CAACC,SAAS,CAAC;IAAEc,KAAK;IAAEC;EAAS,CAAC,CAAC;EAChDN,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACpB,IAAI;IACA;IACA,MAAMR,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAI,CAAC,wCAAwC,EAAEL,IAAI,EAAEF,MAAM,CAAC;IACpFH,QAAQ,CAAC;MACLa,IAAI,EAAErB,aAAa;MACnB2B,OAAO,EAAEV,GAAG,CAACE;IACjB,CAAC,CAAC;IAEFX,QAAQ,CAACe,SAAS,EAAE,CAAC;EACzB,CAAC,CAAC,OAAOD,GAAG,EAAE;IACVd,QAAQ,CAAC;MACLa,IAAI,EAAEpB;IACV,CAAC,CAAC;EACN;AACJ,CAAC;AAGD,OAAO,MAAM8B,MAAM,GAAG,MAAMvB,QAAQ,IAAG;EACnCA,QAAQ,CAAC;IACLa,IAAI,EAAEf;EACV,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module"}